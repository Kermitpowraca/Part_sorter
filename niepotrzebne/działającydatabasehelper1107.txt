import 'dart:async';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;
  static Database? _database;

  DatabaseHelper._internal();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, 'part_sorter.db');
    print('Attempting to open database at: $path'); // Logowanie ścieżki

    try {
      final db = await openDatabase(
        path,
        version: 2,
        onCreate: _onCreate,
        onUpgrade: _onUpgrade,
      );
      print('Database opened successfully at $path');
      return db;
    } catch (e) {
      print('Error opening database: $e');
      rethrow;
    }
  }

  Future<void> _onCreate(Database db, int version) async {
    // Tabela na pudełka
    await db.execute('''
    CREATE TABLE boxes (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      hasCompartments INTEGER NOT NULL,
      compartmentsCount INTEGER,
      width REAL,
      height REAL,
      depth REAL
    )
  ''');

    await db.execute('''
    CREATE TABLE shelf_unit (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      shelf_count INTEGER NOT NULL,
      same_shelf INTEGER NOT NULL CHECK(same_shelf IN (0, 1))
    );
  ''');

    await db.execute('''
    CREATE TABLE shelves (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      shelf_unit_id INTEGER NOT NULL,
      height REAL NOT NULL,
      width REAL NOT NULL,
      depth REAL NOT NULL,
      FOREIGN KEY (shelf_unit_id) REFERENCES shelf_unit(id) ON DELETE CASCADE
    );
  ''');

    // Tabela na wystawy
    await db.execute('''
    CREATE TABLE exhibits (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      location TEXT NOT NULL
    )
  ''');
  }

  Future<void> insertShelf(Database db, int shelfUnitId, double height,
      double width, double depth) async {
    await db.insert(
      'shelves',
      {
        'shelf_unit_id': shelfUnitId,
        'height': height,
        'width': width,
        'depth': depth,
      },
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
  }

  Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
    if (oldVersion < newVersion) {
      print('Migrating database from $oldVersion to $newVersion...');
    }
  }

  Future<int> insertShelfUnit(
      Database db, String name, int shelfCount, int sameShelf) async {
    return await db.insert(
      'shelf_unit',
      {
        'name': name,
        'shelf_count': shelfCount,
        'same_shelf': sameShelf,
      },
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
  }

  Future<int> insertExhibit(Map<String, dynamic> exhibit) async {
    final db = await database;
    return await db.insert('exhibits', exhibit);
  }

  Future<int> insertBox(Map<String, dynamic> box) async {
    final db = await database;
    return await db.insert('boxes', box);
  }

  Future<int> updateBox(int id, Map<String, dynamic> box) async {
    final db = await database;
    return await db.update(
      'boxes',
      box,
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<int> deleteBox(int id) async {
    final db = await database;
    return await db.delete('boxes', where: 'id = ?', whereArgs: [id]);
  }

  Future<List<Map<String, dynamic>>> getExhibits() async {
    final db = await database;
    return await db.query('exhibits'); // Pobranie wszystkich danych z tabeli
  }

  Future<List<Map<String, dynamic>>> getBoxes() async {
    final db = await database;
    final result = await db.query('boxes');
    return result; // Upewnij się, że dane nie są duplikowane tutaj
  }

  Future<int> updateExhibit(int id, Map<String, dynamic> exhibit) async {
    final db = await database;
    return await db.update(
      'exhibits',
      exhibit,
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<int> deleteExhibit(int id) async {
    final db = await database;
    return await db.delete(
      'exhibits',
      where: 'id = ?',
      whereArgs: [id],
    );
  }
}
